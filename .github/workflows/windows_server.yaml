name: WindowsServer Builds
on: [push]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        runtime: ["MD"]
        cxx_standard: [23]
        build_type: ["Release", "Debug"]
        configuration: [
          #{"WINDOWS_VERSION":"2019", "TOOLCHAIN_VERSION":"13"},
          {"WINDOWS_VERSION":"2022", "TOOLCHAIN_VERSION":"13"}
        ]

    runs-on: windows-${{matrix.configuration.WINDOWS_VERSION}}

    steps:
#      - name: Install system dependencies before checkout
#        env:
#          DEBIAN_FRONTEND: noninteractive
#        run: |
#          apt update
#          apt-get install -y \
#            software-properties-common ca-certificates \
#            ninja-build make \
#            zlib1g-dev wget
#
#          add-apt-repository ppa:git-core/ppa
#          apt update && apt install -y git
#          git --version

      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - uses: lukka/get-cmake@latest  # <--= Just this one-liner suffices.

      - name: Install system dependencies after checkout
        run: |
          python3 --version
          cmake --version
          ninja --version
          Get-ChildItem -path $Env:VCPKG_INSTALLATION_ROOT
          Get-ChildItem -path "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build"
#          cl
          #add-apt-repository ppa:ubuntu-toolchain-r/test
          #
          #apt-get install -y \
          #  software-properties-common ca-certificates \
          #  ninja-build make \
          #  python3-full python3-pip \
          #  zlib1g-dev wget
          #
          #python3 -m pip install --upgrade pip --break-system-packages
          #python3 -m pip install --no-cache-dir --break-system-packages --user conan==1.63 cmake

#      - name: Install compiler
#        run: |
#          apt update && apt-get install -y gcc-${{matrix.configuration.TOOLCHAIN_VERSION}} g++-${{matrix.configuration.TOOLCHAIN_VERSION}}
#          update-alternatives \
#            --install /usr/bin/gcc gcc /usr/bin/gcc-${{matrix.configuration.TOOLCHAIN_VERSION}} 90 \
#            --slave /usr/bin/g++ g++ /usr/bin/g++-${{matrix.configuration.TOOLCHAIN_VERSION}} \
#            --slave /usr/bin/gcov gcov /usr/bin/gcov-${{matrix.configuration.TOOLCHAIN_VERSION}}
#
#          update-alternatives --config gcc
#
#      - name: Configure CMake
#        env:
#          CC: gcc-${{matrix.configuration.TOOLCHAIN_VERSION}}
#          CXX: g++-${{matrix.configuration.TOOLCHAIN_VERSION}}
#          BUILD_TYPE: ${{matrix.build_type}}
#          CXX_STANDARD: ${{matrix.cxx_standard}}
#          BACKEND: ${{matrix.backend}}
#        run: |
#          mkdir -p local_build
#
#          conan install ./conanfile.txt  \
#          -s build_type=${BUILD_TYPE}  \
#          --output-folder=local_build \
#          --install-folder=local_build \
#          --generator CMakeToolchain \
#          --build=missing \
#          -c:b tools.cmake.cmaketoolchain:generator=Ninja \
#          -c:h tools.cmake.cmaketoolchain:generator=Ninja
#
#          cmake -B local_build -GNinja \
#            -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
#            -DCMAKE_CXX_STANDARD=${CXX_STANDARD} \
#            -DCMAKE_C_COMPILER=${CC} \
#            -DCMAKE_CXX_COMPILER=${CXX} \
#            -DCMAKE_TOOLCHAIN_FILE=local_build/build/${BUILD_TYPE}/generators/conan_toolchain.cmake \
#            -DWITH_SANITIZER=OFF
#
#      - name: Build
#        run: cmake --build local_build
#
#      - name: Test
#        working-directory: local_build
#        run: ctest --rerun-failed --output-on-failure

#      - name: Run benchmark
#        run: |
#          ls -la local_build/
#          cd local_build/benchmarks
#          ./benchmark_process --benchmark_format=json | tee benchmark_process_result.json
#          ./benchmark_serialize --benchmark_format=json | tee benchmark_serialize_result.json
#          ./benchmark_parse --benchmark_format=json | tee benchmark_parse_result.json
#          cd ../../ && echo ${PWD}
#          git config --global --add safe.directory ${PWD}
#          cat ~/.gitconfig
#
#      - name: Store benchmark_process result
#        uses: benchmark-action/github-action-benchmark@v1
#        with:
#          name: 'Benchmark Serialize&Parse gcc-${{matrix.configuration.TOOLCHAIN_VERSION}} ${{matrix.configuration.UBUNTU_VERSION}} ${{matrix.build_type}} c++-${{matrix.cxx_standard}} Backend ${{matrix.backend}}'
#          tool: 'googlecpp'
#          output-file-path: local_build/benchmarks/benchmark_process_result.json
#          benchmark-data-dir-path: dev/bench/gcc_${{matrix.configuration.UBUNTU_VERSION}}_${{matrix.configuration.TOOLCHAIN_VERSION}}_${{matrix.build_type}}_${{matrix.cxx_standard}}_${{matrix.backend}}/process
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          auto-push: true
#
#      - name: Store benchmark_serialize result
#        uses: benchmark-action/github-action-benchmark@v1
#        with:
#          name: 'Benchmark Serialize gcc-${{matrix.configuration.TOOLCHAIN_VERSION}} ${{matrix.configuration.UBUNTU_VERSION}} ${{matrix.build_type}} c++-${{matrix.cxx_standard}} Backend ${{matrix.backend}}'
#          tool: 'googlecpp'
#          output-file-path: local_build/benchmarks/benchmark_serialize_result.json
#          benchmark-data-dir-path: dev/bench/gcc_${{matrix.configuration.UBUNTU_VERSION}}_${{matrix.configuration.TOOLCHAIN_VERSION}}_${{matrix.build_type}}_${{matrix.cxx_standard}}_${{matrix.backend}}/serialize
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          auto-push: true
#
#      - name: Store benchmark_parse result
#        uses: benchmark-action/github-action-benchmark@v1
#        with:
#          name: 'Benchmark Parse gcc-${{matrix.configuration.TOOLCHAIN_VERSION}} ${{matrix.configuration.UBUNTU_VERSION}} ${{matrix.build_type}} c++-${{matrix.cxx_standard}} Backend ${{matrix.backend}}'
#          tool: 'googlecpp'
#          output-file-path: local_build/benchmarks/benchmark_parse_result.json
#          benchmark-data-dir-path: dev/bench/gcc_${{matrix.configuration.UBUNTU_VERSION}}_${{matrix.configuration.TOOLCHAIN_VERSION}}_${{matrix.build_type}}_${{matrix.cxx_standard}}_${{matrix.backend}}/parse
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          auto-push: true
