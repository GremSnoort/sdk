name: WindowsServer Builds
on: [push]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        runtime: ["MD"]
        cxx_standard: [23]
        build_type: ["Release", "Debug"]
        configuration: [
          #{"WINDOWS_VERSION":"2019", "TOOLCHAIN_VERSION":"13"},
          {"WINDOWS_VERSION":"2022", "TOOLCHAIN_VERSION":"13"}
        ]

    runs-on: windows-${{matrix.configuration.WINDOWS_VERSION}}

    steps:
#      - name: Install system dependencies before checkout
#        env:
#          DEBIAN_FRONTEND: noninteractive
#        run: |
#          apt update
#          apt-get install -y \
#            software-properties-common ca-certificates \
#            ninja-build make \
#            zlib1g-dev wget
#
#          add-apt-repository ppa:git-core/ppa
#          apt update && apt install -y git
#          git --version

      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - uses: lukka/get-cmake@latest  # <--= Just this one-liner suffices.
      - uses: TheMrMilchmann/setup-msvc-dev@v3
        with:
          arch: x64

      - name: Check system dependencies after checkout
        run: |
          python3 --version
          cmake --version
          ninja --version
          cl
          python3 -m pip install --no-cache-dir --break-system-packages conan==1.63
          conan --version
#
      - name: Configure CMake
        env:
          CC: cl
          CXX: cl
          BUILD_TYPE: ${{matrix.build_type}}
          CXX_STANDARD: ${{matrix.cxx_standard}}
          RUNTIME: ${{matrix.runtime}}
        run: |
          New-Item -Path "./" -Name local_build -ItemType "directory"
          Get-ChildItem -path .

          conan install ./conanfile.txt 
            -s build_type=$Env:BUILD_TYPE --output-folder=local_build --install-folder=local_build 
            --generator CMakeToolchain 
            --build=missing 
            -c:b tools.cmake.cmaketoolchain:generator=Ninja 
            -c:h tools.cmake.cmaketoolchain:generator=Ninja 
            -s compiler.runtime=$Env:RUNTIME

          cmake -B local_build -GNinja \
            -DCMAKE_BUILD_TYPE=$Env:BUILD_TYPE \
            -DCMAKE_CXX_STANDARD=$Env:CXX_STANDARD \
            -DCMAKE_C_COMPILER=$Env:CC \
            -DCMAKE_CXX_COMPILER=$Env:CXX \
            -DCMAKE_TOOLCHAIN_FILE=local_build/build/$Env:BUILD_TYPE/generators/conan_toolchain.cmake \
            -DRUNTIME=$Env:RUNTIME

      - name: Build
        run: cmake --build local_build

      - name: Test
        working-directory: local_build
        run: ctest --rerun-failed --output-on-failure

#      - name: Run benchmark
#        run: |
#          ls -la local_build/
#          cd local_build/benchmarks
#          ./benchmark_process --benchmark_format=json | tee benchmark_process_result.json
#          ./benchmark_serialize --benchmark_format=json | tee benchmark_serialize_result.json
#          ./benchmark_parse --benchmark_format=json | tee benchmark_parse_result.json
#          cd ../../ && echo ${PWD}
#          git config --global --add safe.directory ${PWD}
#          cat ~/.gitconfig
#
#      - name: Store benchmark_process result
#        uses: benchmark-action/github-action-benchmark@v1
#        with:
#          name: 'Benchmark Serialize&Parse gcc-${{matrix.configuration.TOOLCHAIN_VERSION}} ${{matrix.configuration.UBUNTU_VERSION}} ${{matrix.build_type}} c++-${{matrix.cxx_standard}} Backend ${{matrix.backend}}'
#          tool: 'googlecpp'
#          output-file-path: local_build/benchmarks/benchmark_process_result.json
#          benchmark-data-dir-path: dev/bench/gcc_${{matrix.configuration.UBUNTU_VERSION}}_${{matrix.configuration.TOOLCHAIN_VERSION}}_${{matrix.build_type}}_${{matrix.cxx_standard}}_${{matrix.backend}}/process
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          auto-push: true
#
#      - name: Store benchmark_serialize result
#        uses: benchmark-action/github-action-benchmark@v1
#        with:
#          name: 'Benchmark Serialize gcc-${{matrix.configuration.TOOLCHAIN_VERSION}} ${{matrix.configuration.UBUNTU_VERSION}} ${{matrix.build_type}} c++-${{matrix.cxx_standard}} Backend ${{matrix.backend}}'
#          tool: 'googlecpp'
#          output-file-path: local_build/benchmarks/benchmark_serialize_result.json
#          benchmark-data-dir-path: dev/bench/gcc_${{matrix.configuration.UBUNTU_VERSION}}_${{matrix.configuration.TOOLCHAIN_VERSION}}_${{matrix.build_type}}_${{matrix.cxx_standard}}_${{matrix.backend}}/serialize
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          auto-push: true
#
#      - name: Store benchmark_parse result
#        uses: benchmark-action/github-action-benchmark@v1
#        with:
#          name: 'Benchmark Parse gcc-${{matrix.configuration.TOOLCHAIN_VERSION}} ${{matrix.configuration.UBUNTU_VERSION}} ${{matrix.build_type}} c++-${{matrix.cxx_standard}} Backend ${{matrix.backend}}'
#          tool: 'googlecpp'
#          output-file-path: local_build/benchmarks/benchmark_parse_result.json
#          benchmark-data-dir-path: dev/bench/gcc_${{matrix.configuration.UBUNTU_VERSION}}_${{matrix.configuration.TOOLCHAIN_VERSION}}_${{matrix.build_type}}_${{matrix.cxx_standard}}_${{matrix.backend}}/parse
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          auto-push: true
